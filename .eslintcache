[{"D:\\Projects\\react-native-tv-demo\\src\\App.js":"1","D:\\Projects\\react-native-tv-demo\\src\\Navigation.js":"2","D:\\Projects\\react-native-tv-demo\\src\\AppProvider.js":"3","D:\\Projects\\react-native-tv-demo\\src\\styles\\Style.js":"4","D:\\Projects\\react-native-tv-demo\\src\\components\\Menu.js":"5","D:\\Projects\\react-native-tv-demo\\src\\components\\Content.js":"6","D:\\Projects\\react-native-tv-demo\\src\\components\\Home.js":"7","D:\\Projects\\react-native-tv-demo\\src\\components\\focusable\\FocusableHighlight.js":"8","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\FocusDemo.js":"9","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\ScrollDemo.js":"10","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\InputDemo.js":"11","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\VideoDemo.js":"12","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\EventsDemo.js":"13","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\VideoContainer.web.js":"14","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\SectionListDemo.js":"15","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\FlatListDemo.js":"16","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\ScrollViewDemo.js":"17","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\Video.js":"18","D:\\Projects\\react-native-tv-demo\\src\\components\\focusable\\FocusableOpacity.js":"19","D:\\Projects\\react-native-tv-demo\\src\\components\\focusable\\FocusableButton.js":"20","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\ComponentsDemo.js":"21","D:\\Projects\\react-native-tv-demo\\src\\components\\focusable\\FocusableSwitch.js":"22","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\VideoProgressBar.js":"23","D:\\Projects\\react-native-tv-demo\\src\\hooks\\useStateRef.js":"24","D:\\Projects\\react-native-tv-demo\\src\\hooks\\useNodeHandle.js":"25","D:\\Projects\\react-native-tv-demo\\src\\hooks\\useNodeID.js":"26","D:\\Projects\\react-native-tv-demo\\src\\hooks\\findNodeID.js":"27"},{"size":841,"mtime":1611045505923,"results":"28","hashOfConfig":"29"},{"size":234,"mtime":1610894045089,"results":"30","hashOfConfig":"29"},{"size":470,"mtime":1611048001948,"results":"31","hashOfConfig":"29"},{"size":1111,"mtime":1611077454526,"results":"32","hashOfConfig":"29"},{"size":2151,"mtime":1611501059544,"results":"33","hashOfConfig":"29"},{"size":1873,"mtime":1611070461107,"results":"34","hashOfConfig":"29"},{"size":408,"mtime":1611069186480,"results":"35","hashOfConfig":"29"},{"size":1237,"mtime":1611564341492,"results":"36","hashOfConfig":"29"},{"size":6026,"mtime":1611564341687,"results":"37","hashOfConfig":"29"},{"size":2238,"mtime":1611564341657,"results":"38","hashOfConfig":"29"},{"size":9607,"mtime":1611567660464,"results":"39","hashOfConfig":"29"},{"size":10858,"mtime":1611568119763,"results":"40","hashOfConfig":"29"},{"size":4475,"mtime":1611564341482,"results":"41","hashOfConfig":"29"},{"size":838,"mtime":1611530048786,"results":"42","hashOfConfig":"29"},{"size":5174,"mtime":1611571351802,"results":"43","hashOfConfig":"29"},{"size":3185,"mtime":1611571351794,"results":"44","hashOfConfig":"29"},{"size":4013,"mtime":1611571351786,"results":"45","hashOfConfig":"29"},{"size":9245,"mtime":1611568032758,"results":"46","hashOfConfig":"29"},{"size":1112,"mtime":1611564341544,"results":"47","hashOfConfig":"29"},{"size":1096,"mtime":1611564341501,"results":"48","hashOfConfig":"29"},{"size":12211,"mtime":1611567723985,"results":"49","hashOfConfig":"29"},{"size":1002,"mtime":1611564341676,"results":"50","hashOfConfig":"29"},{"size":3045,"mtime":1611530430128,"results":"51","hashOfConfig":"29"},{"size":535,"mtime":1611495603781,"results":"52","hashOfConfig":"29"},{"size":532,"mtime":1611068386613,"results":"53","hashOfConfig":"29"},{"size":370,"mtime":1611528736784,"results":"54","hashOfConfig":"29"},{"size":654,"mtime":1611528743697,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"hvz9u4",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},"D:\\Projects\\react-native-tv-demo\\src\\App.js",[],["125","126","127","128","129","130","131","132"],"D:\\Projects\\react-native-tv-demo\\src\\Navigation.js",[],"D:\\Projects\\react-native-tv-demo\\src\\AppProvider.js",[],"D:\\Projects\\react-native-tv-demo\\src\\styles\\Style.js",[],"D:\\Projects\\react-native-tv-demo\\src\\components\\Menu.js",["133"],"import React, {useContext} from 'react';\nimport {View, Text, Image, StyleSheet} from 'react-native';\nimport {navigate} from '../Navigation';\nimport {AppContext} from '../AppProvider';\nimport Style from '../styles/Style';\nimport reactLogoImageSource from '../assets/react_logo.png';\nimport FocusableHighlight from './focusable/FocusableHighlight';\n\nconst Menu = () => {\n  const [appContext, setAppContext] = useContext(AppContext);\n\n  function showMenu() {\n    const items = ['Components', 'Events', 'Focus', 'Scroll', 'Input', 'Video'];\n    return items.map((item) => {\n      const key = 'menu_' + item.toLowerCase();\n      const route = item.toLowerCase();\n      return (\n        <FocusableHighlight\n          onPress={() => {\n            navigate(route);\n          }}\n          underlayColor={Style.buttonFocusedColor}\n          style={styles.menuItem}\n          nativeID={key}\n          key={key}>\n          <Text style={styles.text}>{item}</Text>\n        </FocusableHighlight>\n      );\n    });\n  }\n\n  return appContext.menuVisible ? (\n    <View style={styles.left}>\n      <Image style={styles.logo} source={reactLogoImageSource} />\n      <Text style={styles.title}>{'React Native TV'}</Text>\n      <View style={styles.menu}>{showMenu()}</View>\n    </View>\n  ) : null;\n};\n\nexport default Menu;\n\nconst styles = StyleSheet.create({\n  left: {\n    backgroundColor: Style.backgroundColor,\n    width: Style.px(400),\n    height: Style.px(1080),\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  logo: {\n    width: Style.px(150),\n    height: Style.px(100),\n    margin: Style.px(100),\n    marginBottom: Style.px(20),\n    resizeMode: 'contain',\n  },\n  title: {\n    fontSize: Style.px(30),\n    color: 'white',\n  },\n  menu: {\n    width: Style.px(400),\n    height: Style.px(800),\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  menuItem: {\n    width: Style.px(300),\n    height: Style.px(90),\n    margin: Style.px(10),\n    backgroundColor: Style.buttonUnfocusedColor,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: Style.px(40),\n  },\n});\n","D:\\Projects\\react-native-tv-demo\\src\\components\\Content.js",["134"],"import React, {useContext} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport Style from '../styles/Style';\nimport {AppContext} from '../AppProvider';\nimport Home from './Home';\nimport ComponentsDemo from './demos/ComponentsDemo';\nimport EventsDemo from './demos/EventsDemo';\nimport FocusDemo from './demos/FocusDemo';\nimport ScrollDemo from './demos/ScrollDemo';\nimport InputDemo from './demos/InputDemo';\nimport VideoDemo from './demos/VideoDemo';\n\nconst Stack = createStackNavigator();\n\nconst Content = () => {\n  const [appContext, setAppContext] = useContext(AppContext);\n\n  return (\n    <View\n      style={[\n        styles.navigator,\n        !appContext.menuVisible && styles.navigatorFullscreen,\n      ]}>\n      <Stack.Navigator\n        initialRouteName=\"home\"\n        detachInactiveScreens={true}\n        screenOptions={{\n          headerShown: false,\n          gestureEnabled: false,\n          animationEnabled: false,\n          unmountInactiveScreen: true,\n          detachPreviousScreen: true,\n        }}>\n        <Stack.Screen name=\"home\" component={Home} />\n        <Stack.Screen name=\"components\" component={ComponentsDemo} />\n        <Stack.Screen name=\"events\" component={EventsDemo} />\n        <Stack.Screen name=\"focus\" component={FocusDemo} />\n        <Stack.Screen name=\"scroll\" component={ScrollDemo} />\n        <Stack.Screen name=\"input\" component={InputDemo} />\n        <Stack.Screen name=\"video\" component={VideoDemo} />\n      </Stack.Navigator>\n    </View>\n  );\n};\n\nexport default Content;\n\nconst styles = StyleSheet.create({\n  app: {\n    width: Style.px(1920),\n    height: Style.px(1080),\n    flex: 1,\n    flexDirection: 'row',\n  },\n  navigator: {\n    width: Style.px(1520),\n    height: Style.px(1080),\n  },\n  navigatorFullscreen: {\n    width: Style.px(1920),\n  },\n});\n","D:\\Projects\\react-native-tv-demo\\src\\components\\Home.js",["135"],"import React from 'react';\nimport {View, Text, StyleSheet} from 'react-native';\nimport Style from '../styles/Style';\n\nconst Home = () => {\n  return (\n    <View style={Style.styles.right}>\n      <View style={Style.styles.header}>\n        <Text style={Style.styles.headerText}>{'React Native TV Demos'}</Text>\n      </View>\n      <View style={Style.styles.content} />\n    </View>\n  );\n};\n\nexport default Home;\n","D:\\Projects\\react-native-tv-demo\\src\\components\\focusable\\FocusableHighlight.js",["136","137"],"import React, {useState, useRef, forwardRef} from 'react';\nimport {TouchableHighlight, View} from 'react-native';\n\nconst FocusableHighlight = forwardRef((props, ref) => {\n  const [focused, setFocused] = useState(false);\n  const [pressed, setPressed] = useState(false);\n\n  return (\n    <TouchableHighlight\n      {...props}\n      ref={ref}\n      onPress={(event) => {\n        if (event.eventKeyAction !== undefined) {\n          setPressed(parseInt(event.eventKeyAction) === 0);\n          if (props.onPress) {\n            props.onPress(event);\n          }\n        }\n      }}\n      onFocus={(event) => {\n        console.log('focus: ' + props.nativeID);\n        setFocused(true);\n        if (props.onFocus) {\n          props.onFocus(event);\n        }\n      }}\n      onBlur={(event) => {\n        setFocused(false);\n        if (props.onBlur) {\n          props.onBlur(event);\n        }\n      }}\n      style={[\n        props.style,\n        focused && {\n          backgroundColor: props.underlayColor,\n          opacity: props.activeOpacity,\n        },\n        focused && props.styleFocused,\n        pressed && props.stylePressed,\n      ]}>\n      {props.children || <View />}\n    </TouchableHighlight>\n  );\n});\n\nexport default FocusableHighlight;\n","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\FocusDemo.js",[],"D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\ScrollDemo.js",["138"],"import React, {useState} from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\nimport Style from '../../styles/Style';\nimport FocusableHighlight from '../focusable/FocusableHighlight';\nimport ScrollViewDemo from './ScrollViewDemo';\nimport FlatListDemo from './FlatListDemo';\nimport SectionListDemo from './SectionListDemo';\n\nconst TAB_SCROLLVIEW = 'scroll';\nconst TAB_FLATLIST = 'flatlist';\nconst TAB_SECTIONLIST = 'sectionlist';\n\nconst tabs = [\n  {\n    type: TAB_SCROLLVIEW,\n    text: 'ScrollView',\n  },\n  {\n    type: TAB_FLATLIST,\n    text: 'FlatList',\n  },\n  {\n    type: TAB_SECTIONLIST,\n    text: 'SectionList',\n  },\n];\n\nconst ScrollDemo = () => {\n  const [selectedTab, setSelectedTab] = useState(TAB_SCROLLVIEW);\n\n  function isSelected(tab) {\n    return selectedTab === tab;\n  }\n\n  function showTabs() {\n    return tabs.map((tab, key) => {\n      return (\n        <FocusableHighlight\n          onFocus={() => {}}\n          onPress={() => setSelectedTab(tab.type)}\n          style={[styles.tab, selectedTab === tab.type && styles.tabSelected]}\n          underlayColor={Style.buttonFocusedColor}\n          nativeID={'tab_' + tab.type}\n          key={key}>\n          <Text style={styles.tabText}>{tab.text}</Text>\n        </FocusableHighlight>\n      );\n    });\n  }\n\n  return (\n    <View style={Style.styles.right}>\n      <View style={Style.styles.header}>\n        <Text style={[Style.styles.headerText, {marginTop: 40}]}>\n          {'Scroll Demo'}\n        </Text>\n        <View style={styles.tabs}>{showTabs()}</View>\n      </View>\n      {isSelected(TAB_SCROLLVIEW) && <ScrollViewDemo />}\n      {isSelected(TAB_FLATLIST) && <FlatListDemo />}\n      {isSelected(TAB_SECTIONLIST) && <SectionListDemo />}\n    </View>\n  );\n};\n\nexport default ScrollDemo;\n\nconst styles = StyleSheet.create({\n  tabs: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  tab: {\n    width: Style.px(200),\n    height: Style.px(100),\n    margin: Style.px(10),\n    backgroundColor: Style.buttonUnfocusedColor,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  tabSelected: {\n    borderWidth: Style.px(10),\n    borderColor: '#628fbd',\n  },\n  tabText: {\n    fontSize: Style.px(20),\n  },\n});\n","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\InputDemo.js",[],"D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\VideoDemo.js",["139","140","141","142","143","144","145"],"import React, {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n  useContext,\n} from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  BackHandler,\n  TVEventHandler,\n} from 'react-native';\nimport {useFocusEffect} from '@react-navigation/native';\nimport {useNavigation} from '@react-navigation/native';\nimport useStateRef from '../../hooks/useStateRef';\nimport Style from '../../styles/Style';\nimport sampleVideoSource from '../../assets/sample.mov';\nimport {AppContext} from '../../AppProvider';\nimport VideoContainer from './VideoContainer';\nimport FocusableHighlight from '../focusable/FocusableHighlight';\nimport VideoProgressBar from './VideoProgressBar';\n\nconst EVENT_LINES = 18;\nconst EVENT_LINES_FULLSCREEN = 30;\n\nconst VideoDemo = () => {\n  let hideOverlayTimer = null;\n\n  const navigation = useNavigation();\n\n  // Init Refs\n  const playerRef = useRef(null);\n  const playPauseButtonRef = useRef(null);\n\n  // Context\n  const [appContext, setAppContext] = useContext(AppContext);\n\n  // State\n  const [source, setSource] = useState(sampleVideoSource);\n  const [videoEventStack, setVideoEventStack] = useState([]);\n  const [videoDuration, setVideoDuration] = useState(0);\n  const [videoTime, setVideoTime] = useState(0);\n  const [isReady, setIsReady] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // State Refs\n  const [pausedRef, isPaused, setPaused] = useStateRef(true);\n  const [overlayRef, isOverlayVisible, setIsOverlayVisible] = useStateRef(true);\n  const [fullscreenRef, isFullscreen, setIsFullscreen] = useStateRef(false);\n\n  useFocusEffect(\n    useCallback(() => {\n      // Listen to back button\n      const backHandler = BackHandler.addEventListener(\n        'hardwareBackPress',\n        backHandlerListener,\n      );\n      // Listen to TV events\n      const tvEventHandler = new TVEventHandler();\n      tvEventHandler.enable(null, tvEventListener);\n      // Clean up\n      return () => {\n        // Pause playback\n        if (!isPaused()) {\n          setPaused(true);\n        }\n        // Clean timeout\n        if (hideOverlayTimer) {\n          clearTimeout(hideOverlayTimer);\n        }\n        // Remove backHandler\n        backHandler.remove();\n        // Remove TV event listener\n        if (tvEventHandler) {\n          tvEventHandler.disable();\n        }\n      };\n    }, []),\n  );\n\n  useFocusEffect(\n    useCallback(() => {\n      // Prevent react navigation to handle back button is player is fullscreen\n      return navigation.addListener('beforeRemove', (e) => {\n        if (isFullscreen()) {\n          e.preventDefault();\n        }\n      });\n    }, []),\n  );\n\n  useEffect(() => {\n    // Toggle menu\n    setAppContext({menuVisible: !isFullscreen()});\n  }, [fullscreenRef.current]);\n\n  function toggleFullscreen() {\n    pushVideoEventStack(isFullscreen() ? 'exitFullscreen' : 'enterFullscreen');\n    // Toggle fullscreen\n    setIsFullscreen(!isFullscreen());\n  }\n\n  function setOverlayVisible() {\n    console.log('setOverlayVisible', isOverlayVisible());\n    if (isOverlayVisible() === false) {\n      setIsOverlayVisible(true);\n      if (playPauseButtonRef) {\n        playPauseButtonRef.current.focus();\n      }\n    }\n    setOverlayHiddenAfterDelay();\n  }\n\n  function setOverlayHidden() {\n    if (isOverlayVisible() === true && !isPaused()) {\n      setIsOverlayVisible(false);\n    }\n  }\n\n  function setOverlayHiddenAfterDelay() {\n    console.log('setOverlayHiddenAfterDelay');\n    if (hideOverlayTimer) {\n      clearTimeout(hideOverlayTimer);\n    }\n    hideOverlayTimer = setTimeout(setOverlayHidden, 4000);\n  }\n\n  function backHandlerListener() {\n    console.log('backHandleListener => got back button event');\n    if (isFullscreen()) {\n      toggleFullscreen();\n    }\n    return true;\n  }\n\n  function tvEventListener(component, event) {\n    //console.log('VideoDemo.tvEventListener()', event);\n    if (event.eventKeyAction === 0) {\n      // Show overlay\n      setOverlayVisible();\n      // Toggle play / pause\n      if (event.eventType === 'playPause') {\n        setPaused(!isPaused());\n      }\n    }\n  }\n\n  // Video Events\n\n  function pushVideoEventStack(event, params) {\n    let eventStr = event + '(' + (params ? JSON.stringify(params) : '') + ')';\n    console.log('Video event: ' + eventStr);\n    const eventLines = isFullscreen() ? EVENT_LINES_FULLSCREEN : EVENT_LINES;\n    setVideoEventStack((oldVideoEventStack) =>\n      [...oldVideoEventStack, eventStr].slice(eventLines * -1),\n    );\n  }\n\n  function onReadyForDisplay() {\n    setIsReady(true);\n    pushVideoEventStack('onReadyForDisplay');\n  }\n\n  function onLoad(data) {\n    setIsLoading(false);\n    setVideoDuration(data.duration);\n    pushVideoEventStack('onLoad', data);\n  }\n\n  function onLoadStart(data) {\n    setIsLoading(true);\n    pushVideoEventStack('onLoadStart', data);\n  }\n\n  function onPlaybackRateChange(data) {\n    setIsPlaying(data.playbackRate > 0);\n    pushVideoEventStack('onPlaybackRateChange', data);\n  }\n\n  function onProgress(data) {\n    setVideoTime(data.currentTime);\n    pushVideoEventStack('onProgress', data);\n  }\n\n  function onEnd() {\n    setVideoTime(0);\n    setPaused(true);\n    setIsPlaying(false);\n    pushVideoEventStack('onEnd');\n    setOverlayVisible();\n  }\n\n  function onError(error) {\n    pushVideoEventStack('onError', error);\n  }\n\n  function formatTime(time) {\n    let seconds = parseInt(time, 10);\n    let hours = Math.floor(seconds / 3600);\n    let minutes = Math.floor((seconds - hours * 3600) / 60);\n    seconds = seconds - hours * 3600 - minutes * 60;\n    let timeFormat = '';\n    if (hours > 0) {\n      if (hours < 10) {\n        hours = '0' + hours;\n      }\n      timeFormat += hours + ':';\n    }\n    if (minutes < 10) {\n      minutes = '0' + minutes;\n    }\n    if (seconds < 10) {\n      seconds = '0' + seconds;\n    }\n    // Fix NaN\n    if (isNaN(minutes)) {\n      minutes = '-';\n    }\n    if (isNaN(seconds)) {\n      seconds = '-';\n    }\n    timeFormat += minutes + ':' + seconds;\n    return timeFormat;\n  }\n\n  return (\n    <View style={[Style.styles.right, isFullscreen() && styles.fullscreen]}>\n      {!isFullscreen() && (\n        <View style={Style.styles.header}>\n          <Text style={Style.styles.headerText}>{'Video Demo'}</Text>\n        </View>\n      )}\n      <View style={[Style.styles.content, isFullscreen() && styles.fullscreen]}>\n        <View\n          style={\n            isFullscreen()\n              ? styles.videoContainerFullscreen\n              : styles.videoContainer\n          }>\n          <VideoContainer\n            ref={playerRef}\n            source={source}\n            paused={isPaused()}\n            onReadyForDisplay={onReadyForDisplay}\n            onLoadStart={onLoadStart}\n            onLoad={onLoad}\n            onPlaybackRateChange={onPlaybackRateChange}\n            onProgress={onProgress}\n            onEnd={onEnd}\n            onError={onError}\n          />\n          <View\n            style={\n              isOverlayVisible()\n                ? styles.videoOverlayVisible\n                : styles.videoOverlayHidden\n            }>\n            <View style={styles.videoOverlayBackground} />\n            <View style={styles.videoEvents}>\n              <Text style={styles.videoEventsText}>\n                {'Video Events:\\n' + videoEventStack.join('\\n')}\n              </Text>\n            </View>\n            <VideoProgressBar\n              duration={videoDuration}\n              time={videoTime}\n              style={styles.progressBar}\n              seek={(seconds) => {\n                playerRef.current.seek(seconds);\n              }}\n            />\n            <View style={styles.videoControls}>\n              <FocusableHighlight\n                nativeID={'play_pause_button'}\n                ref={playPauseButtonRef}\n                onPress={(e) => {\n                  if (e.eventKeyAction === 0 && e.eventType === 'select') {\n                    setPaused(!isPaused());\n                  }\n                }}\n                style={styles.videoControl}\n                hasTVPreferredFocus={true}\n                underlayColor={Style.buttonFocusedColor}>\n                <Text style={styles.videoControlText}>\n                  {isPaused() ? 'Play' : 'Pause'}\n                </Text>\n              </FocusableHighlight>\n              <FocusableHighlight\n                nativeID={'fullscreen_button'}\n                onPress={(e) => {\n                  if (e.eventKeyAction === 0 && e.eventType === 'select') {\n                    toggleFullscreen();\n                  }\n                }}\n                style={styles.videoControl}\n                underlayColor={Style.buttonFocusedColor}>\n                <Text style={styles.videoControlText}>\n                  {isFullscreen() ? 'Exit Fullscreen' : 'Enter Fullscreen'}\n                </Text>\n              </FocusableHighlight>\n              <View style={styles.videoTime}>\n                <Text style={styles.videoTimeText}>\n                  {formatTime(videoTime) + ' / ' + formatTime(videoDuration)}\n                </Text>\n              </View>\n            </View>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default VideoDemo;\n\nconst styles = StyleSheet.create({\n  fullscreen: {\n    width: Style.px(1920),\n    height: Style.px(1080),\n  },\n  videoContainer: {\n    width: Style.px(1280),\n    height: Style.px(720),\n  },\n  videoContainerFullscreen: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: Style.px(1920),\n    height: Style.px(1080),\n  },\n  videoOverlayVisible: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n  },\n  videoOverlayHidden: {\n    opacity: 0.0,\n  },\n  videoOverlayBackground: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    backgroundColor: 'black',\n    opacity: 0.5,\n  },\n  videoEvents: {\n    position: 'absolute',\n    width: '100%',\n    height: '80%',\n    padding: Style.px(20),\n  },\n  videoEventsText: {\n    fontSize: Style.px(20),\n    color: 'white',\n  },\n  progressBar: {\n    position: 'absolute',\n    bottom: Style.px(135),\n    width: '96%',\n    marginLeft: '2%',\n  },\n  videoControls: {\n    position: 'absolute',\n    width: '100%',\n    height: Style.px(140),\n    bottom: 0,\n    backgroundColor: 'black',\n    opacity: 0.8,\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'flex-end',\n  },\n  videoControl: {\n    width: Style.px(300),\n    height: Style.px(100),\n    margin: Style.px(20),\n    backgroundColor: Style.buttonUnfocusedColor,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  videoControlText: {\n    fontSize: Style.px(30),\n  },\n  videoTime: {\n    flex: 1,\n    //width: Style.px(200),\n    height: Style.px(100),\n    margin: Style.px(20),\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  videoTimeText: {\n    fontSize: Style.px(20),\n    color: 'white',\n  },\n});\n","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\EventsDemo.js",[],"D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\VideoContainer.web.js",[],"D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\SectionListDemo.js",["146"],"import React, {useEffect, useRef} from 'react';\nimport {\n  StyleSheet,\n  View,\n  ScrollView,\n  SectionList,\n  Text,\n  Platform,\n  findNodeHandle,\n} from 'react-native';\nimport Style from '../../styles/Style';\nimport FocusableHighlight from '../focusable/FocusableHighlight';\n\nconst SECTIONS = 15;\nconst SECTIONS_ROWS = 1;\nconst ITEMS = 15;\n\nconst SectionListDemo = () => {\n  const sectionListRef = useRef(null);\n  const rowRefs = useRef([]);\n\n  function onItemFocus(e, section, row, item) {\n    if (!rowRefs.current) {\n      return;\n    }\n    if (section >= 0 && section < rowRefs.current.length) {\n      // Check refs\n      const rowRef = rowRefs.current[section];\n      if (!rowRef || !sectionListRef) {\n        return;\n      }\n      // Get styles\n      const rowsStyle = StyleSheet.flatten(styles.rows);\n      const rowItemStyle = StyleSheet.flatten(styles.rowItem);\n      const sectionHeader = StyleSheet.flatten(styles.sectionHeader);\n      // Get rows width / height\n      const rowsWidth = rowsStyle.width;\n      const rowsHeight = rowsStyle.height;\n      // Get item width / height\n      const itemWidth = rowItemStyle.width + rowItemStyle.margin * 2;\n      const itemHeight =\n        rowItemStyle.height +\n        rowItemStyle.margin * 2 +\n        sectionHeader.fontSize +\n        sectionHeader.marginTop;\n      // Get horizontal offset for current item in current row\n      const itemLeftOffset = itemWidth * item;\n      // Get vertical offset for current row in rows\n      const itemTopOffset = itemHeight * section;\n      // Center item horizontally in row\n      const rowsWidthHalf = rowsWidth / 2;\n      if (itemLeftOffset >= rowsWidthHalf) {\n        const x = itemLeftOffset - rowsWidthHalf + itemWidth / 2;\n        rowRef.scrollTo({x: x, animated: true});\n      } else {\n        rowRef.scrollTo({x: 0, animated: true});\n      }\n      // Scroll vertically to current row\n      const rowsHeightHalf = rowsHeight / 2;\n      if (itemTopOffset >= rowsHeightHalf - itemHeight) {\n        sectionListRef.current.scrollToLocation({\n          sectionIndex: section,\n          itemIndex: 0,\n          animated: true,\n        });\n      } else {\n        sectionListRef.current.scrollToLocation({\n          sectionIndex: 0,\n          itemIndex: 0,\n          animated: true,\n        });\n      }\n    }\n  }\n\n  function showItems(section, row) {\n    const items = Array.from(Array(ITEMS).keys());\n    return items.map((item) => {\n      const key = 'sectionlist_item_' + section + '.' + row + '.' + item;\n      return (\n        <FocusableHighlight\n          onPress={() => {}}\n          onFocus={(e) => {\n            onItemFocus(e, section, row, item);\n          }}\n          underlayColor={Style.buttonFocusedColor}\n          style={styles.rowItem}\n          nativeID={key}\n          key={key}>\n          <Text style={styles.text}>{section + '.' + item}</Text>\n        </FocusableHighlight>\n      );\n    });\n  }\n\n  function showRow(sectionItem) {\n    const item = sectionItem.item;\n    const key = 'sectionlist_row_' + item.section + '.' + item.row;\n    return (\n      <ScrollView\n        ref={(ref) => {\n          rowRefs.current[item.section] = ref;\n          if (Platform.OS === 'web') {\n            let node = findNodeHandle(ref);\n            if (node) {\n              // Set scrollview spatial navigation action as focus to avoid scroll on up\n              node.style.setProperty('--spatial-navigation-action', 'focus');\n            }\n          }\n        }}\n        style={styles.row}\n        horizontal={true}\n        showsHorizontalScrollIndicator={false}\n        nativeID={key}\n        key={key}>\n        {showItems(item.section, item.row)}\n      </ScrollView>\n    );\n  }\n\n  function renderSectionHeader(sectionHeader) {\n    const section = sectionHeader.section;\n    return <Text style={styles.sectionHeader}>{section.title}</Text>;\n  }\n\n  function getSections() {\n    // Load data\n    let sections = [];\n    for (let i = 0; i < SECTIONS; i++) {\n      let rows = [];\n      for (let j = 0; j < SECTIONS_ROWS; j++) {\n        rows.push({section: i, row: j});\n      }\n      sections.push({\n        title: 'Section ' + i,\n        data: rows,\n      });\n    }\n    return sections;\n  }\n\n  // Render\n  return (\n    <View style={Style.styles.content}>\n      <SectionList\n        ref={sectionListRef}\n        style={styles.rows}\n        nativeID={'sectionlist'}\n        sections={getSections()}\n        renderItem={showRow}\n        renderSectionHeader={renderSectionHeader}\n        keyExtractor={(row) => row.row}\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  rows: {\n    width: Style.px(1520),\n    height: Style.px(780),\n  },\n  row: {\n    width: '100%',\n    height: Style.px(200),\n  },\n  rowItem: {\n    width: Style.px(300),\n    height: Style.px(200),\n    margin: Style.px(10),\n    backgroundColor: Style.buttonUnfocusedColor,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  sectionHeader: {\n    marginTop: Style.px(5),\n    marginLeft: Style.px(10),\n    color: 'white',\n    fontSize: Style.px(40),\n  },\n  text: {\n    fontSize: Style.px(40),\n  },\n});\n\nexport default SectionListDemo;\n","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\FlatListDemo.js",[],"D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\ScrollViewDemo.js",[],"D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\Video.js",["147","148","149"],"import React, {\n  useState,\n  useRef,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from 'react';\nimport shaka from 'shaka-player';\n\nconst FORMAT_HTML5 = 'HTML5';\nconst FORMAT_HLS = 'HLS';\nconst FORMAT_DASH = 'DASH';\n\n/**\n * react-native-video components for react-native-web\n */\nconst Video = forwardRef((props, ref) => {\n  const {\n    source,\n    poster,\n    paused,\n    autoplay,\n    controls,\n    muted,\n    repeat,\n    inline,\n    volume,\n    rate,\n    onLoad,\n    onLoadStart,\n    onReadyForDisplay,\n    onPlaybackRateChange,\n    onProgress,\n    onSeek,\n    onEnd,\n    onError,\n    onExitFullscreen,\n  } = props;\n\n  // State\n  const [format, setFormat] = useState(FORMAT_HTML5);\n  const [shakaPlayer, setShakaPlayer] = useState(null);\n\n  // Video ref\n  const video = useRef(null);\n\n  useEffect(() => {\n    //console.log('Video.useEffect([])');\n    // Bind listeners\n    bindListeners();\n    return () => {\n      // Destroy shaka palyer\n      if (shakaPlayer) {\n        shakaPlayer.destroy();\n      }\n      // Unbind listeners\n      unbindListeners();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (source) {\n      // Get file extension from source\n      const extension = source.split(/[#?]/)[0].split('.').pop().trim();\n      // Get format\n      let format = FORMAT_HTML5;\n      if (extension === 'm3u8') {\n        format = FORMAT_HLS;\n      } else if (extension === 'mpd') {\n        format = FORMAT_DASH;\n        setShakaPlayer(new shaka.Player(video.current));\n      }\n      setFormat(format);\n    }\n  }, [source]);\n\n  useEffect(() => {\n    //console.log('Video.useEffect([shakaPlayer, source])');\n    if (shakaPlayer && source) {\n      shakaPlayer.load(source);\n    }\n  }, [shakaPlayer, source]);\n\n  useEffect(() => {\n    //console.log(\"Video.useEffect([paused])\", paused);\n    // Toggle play / pause from parent\n    if (paused === false) {\n      play();\n    } else if (paused === true) {\n      pause();\n    }\n  }, [paused]);\n\n  useEffect(() => {\n    console.log('rate: ', rate);\n    if (rate) {\n      if (rate === 0) {\n        pause();\n      } else {\n        play();\n        // TODO: handle rate < 1\n      }\n    }\n  }, [rate]);\n\n  useEffect(() => {\n    if (volume >= 0 && volume <= 1) {\n      video.current.volume = volume;\n    }\n  }, [volume]);\n\n  // Private methods\n\n  function play() {\n    //console.log('Video.play()');\n    if (video.current.paused) {\n      if (video.current.currentTime > 0 || !autoplay) {\n        // Handle old exception\n        let playPromise = null;\n        try {\n          playPromise = video.current.play();\n        } catch (error) {\n          onError(error);\n        }\n        // Handle promise\n        if (playPromise !== undefined) {\n          playPromise\n            .then(() => {\n              // playback started\n            })\n            .catch((error) => {\n              onError(error);\n            });\n        }\n      }\n    }\n  }\n\n  function pause() {\n    //console.log('Video.pause()');\n    if (!video.current.paused) {\n      video.current.pause();\n    }\n  }\n\n  // react-native-video API (public methods)\n\n  useImperativeHandle(ref, () => ({\n    /**\n     * react-native-video seek() method requires seconds\n     *\n     * @param seconds\n     */\n    seek: (seconds) => {\n      //console.log('Video.seek(' + seconds + ')');\n      if (seconds) {\n        if (seconds >= 0 && seconds < video.current.duration) {\n          video.current.currentTime = seconds;\n        }\n      }\n    },\n\n    presentFullscrenPlayer: () => {\n      //console.log('Video.presentFullscreenPlayer()');\n      if (video) {\n        if (video.current.requestFullscreen) {\n          video.current.requestFullscreen();\n        }\n        // Deprecated\n        else if (video.current.enterFullscreen) {\n          video.current.enterFullscreen();\n        } else if (video.current.webkitEnterFullscreen) {\n          video.current.webkitEnterFullscreen();\n        }\n      }\n    },\n\n    dismissFullscreenPlayer: () => {\n      //console.log('Video.dismissFullscreenPlayer()');\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    },\n  }));\n\n  // react-native-video callback proxy\n\n  /**\n   * loadedmetadata => onLoad\n   */\n  function onVideoLoadedMetadata() {\n    //console.log('Video.onVideoLoadedMetadata()');\n    if (onLoad && video) {\n      onLoad({\n        currentPosition: 0,\n        duration: video.current.duration,\n        // TODO: naturalSize, audioTracks, textTracks\n      });\n    }\n  }\n\n  /**\n   * loadstart => onLoadStart\n   */\n  function onVideoLoadStart() {\n    if (source) {\n      //console.log('Video.onVideoLoadStart()');\n      if (onLoadStart && video) {\n        onLoadStart({\n          isNetwork: true,\n          type: '',\n          uri: source.uri,\n        });\n      }\n    }\n  }\n\n  /**\n   * waiting => onLoadStart\n   */\n  function onVideoWaiting() {\n    //console.log('Video.onVideoWaiting()');\n    if (onLoadStart && video) {\n      onLoadStart({\n        isNetwork: true,\n        type: '',\n        uri: source.uri,\n      });\n    }\n  }\n\n  /**\n   * canplaythrough => onReadyForDisplay\n   */\n  function onVideoCanPlayThrough() {\n    //console.log('Video.onVideoCanPlayThrough()');\n    if (video) {\n      if (onReadyForDisplay) {\n        onReadyForDisplay();\n      }\n    }\n  }\n\n  /**\n   * play => onPlaybackRateChange\n   */\n  function onVideoPlay() {\n    //console.log('Video.onVideoPlay()');\n    if (onPlaybackRateChange) {\n      onPlaybackRateChange({playbackRate: 1});\n    }\n  }\n\n  /**\n   * pause => onPlaybackRateChange\n   */\n  function onVideoPause() {\n    //console.log('Video.onVideoPause()');\n    if (onPlaybackRateChange) {\n      onPlaybackRateChange({playbackRate: 0});\n    }\n  }\n\n  /**\n   * ratechange => onPlaybackRateChange\n   */\n  function onVideoRateChange() {\n    //console.log('Video.onVideoRateChange()');\n    if (onPlaybackRateChange && video) {\n      onPlaybackRateChange({\n        playbackRate: video.current.playbackRate,\n      });\n    }\n  }\n\n  /**\n   * timeupdate => onProgress\n   */\n  function onVideoTimeUpdate() {\n    //console.log('Video.onVideoTimeUpdate()');\n    if (onProgress && video) {\n      onProgress({\n        seekableDuration: video.current.duration,\n        playbableDuration: video.current.duration,\n        currentTime: video.current.currentTime,\n      });\n    }\n  }\n\n  /**\n   * seeked => onSeek\n   */\n  function onVideoSeeked() {\n    //console.log('Video.onVideoSeeked()');\n    if (onSeek && video) {\n      onSeek({\n        currentTime: video.current.currentTime,\n        seekTime: video.current.currentTime,\n      });\n    }\n  }\n\n  /**\n   * ended => onEnd\n   */\n  function onVideoEnded() {\n    //console.log('Video.onVideoEnded()');\n    if (onEnd) {\n      onEnd();\n    }\n  }\n\n  /**\n   * error => onError\n   */\n  function onVideoError() {\n    if (source) {\n      //console.log('Video.onVideoError()');\n      let error = {};\n      // TODO: return same errors as react-native-video\n      if (onError) {\n        onError(error);\n      }\n    }\n  }\n\n  /**\n   * Get exit fullscreen event for webkit\n   */\n  function onVideoEndFullscreen() {\n    //console.log('Video.onVideoEndFullscreen()');\n    if (onExitFullscreen) {\n      onExitFullscreen();\n    }\n  }\n\n  /**\n   * get exit fullscreen event for firefox\n   */\n  function onVideoFullscreenChange(e) {\n    //console.log('Video.onVideoEndFullscreen()');\n    if (document.fullscreenElement) {\n      // enter fullscreen\n    } else if (onExitFullscreen) {\n      onExitFullscreen();\n    }\n  }\n\n  // Listeners\n\n  function bindListeners() {\n    //console.log('Video.bindListeners()');\n    if (video && video.current) {\n      // Unsupported native listeners\n      video.current.addEventListener(\n        'webkitendfullscreen',\n        onVideoEndFullscreen,\n      );\n    }\n    // Listeners on document\n    document.addEventListener('fullscreenchange', onVideoFullscreenChange);\n  }\n\n  function unbindListeners() {\n    //console.log('Video.unbindListeners()');\n    if (video && video.current) {\n      // Unsupported native listeners\n      video.current.removeEventListener(\n        'webkitendfullscreen',\n        onVideoEndFullscreen,\n      );\n      // Listeners on document\n      document.removeEventListener('fullscreenchange', onVideoFullscreenChange);\n    }\n  }\n\n  // Optional params\n  let controlsProp = controls ? {controls: 'controls'} : {};\n  let autoPlayProp = autoplay ? {autoplay: 'autoplay'} : {};\n  let mutedProp = muted ? {muted: 'muted'} : {};\n  let repeatProp = repeat ? {loop: 'loop'} : {};\n  let playsInlineProp = inline ? {playsInline: 'playsInline'} : {};\n\n  // Build <video> element\n  return (\n    <video\n      className=\"video\"\n      ref={video}\n      src={source.uri || source}\n      poster={poster}\n      {...controlsProp}\n      {...autoPlayProp}\n      {...mutedProp}\n      {...repeatProp}\n      {...playsInlineProp}\n      onLoadedMetadata={onVideoLoadedMetadata}\n      onLoadStart={onVideoLoadStart}\n      onWaiting={onVideoWaiting}\n      onCanPlayThrough={onVideoCanPlayThrough}\n      onPlay={onVideoPlay}\n      onPause={onVideoPause}\n      onRateChange={onVideoRateChange}\n      onSeeked={onVideoSeeked}\n      onTimeUpdate={onVideoTimeUpdate}\n      onEnded={onVideoEnded}\n      onError={onVideoError}\n      style={{width: '100%', height: '100%'}}\n    />\n  );\n});\n\nexport default Video;\n","D:\\Projects\\react-native-tv-demo\\src\\components\\focusable\\FocusableOpacity.js",["150"],"import React, {useState, forwardRef} from 'react';\nimport {TouchableOpacity} from 'react-native';\n\nconst FocusableOpacity = forwardRef((props, ref) => {\n  const [focused, setFocused] = useState(false);\n  const [pressed, setPressed] = useState(false);\n\n  return (\n    <TouchableOpacity\n      {...props}\n      ref={ref}\n      onPress={(event) => {\n        if (event.eventKeyAction !== undefined) {\n          setPressed(parseInt(event.eventKeyAction) === 0);\n          if (props.onPress) {\n            props.onPress(event);\n          }\n        }\n      }}\n      onFocus={(event) => {\n        console.log('focus: ' + props.nativeID);\n        setFocused(true);\n        if (props.onFocus) {\n          props.onFocus(event);\n        }\n      }}\n      onBlur={(event) => {\n        setFocused(false);\n        if (props.onBlur) {\n          props.onBlur(event);\n        }\n      }}\n      style={[\n        props.style,\n        focused && {\n          opacity: props.activeOpacity,\n        },\n        focused && props.styleFocused,\n        pressed && props.stylePressed,\n      ]}\n    />\n  );\n});\n\nexport default FocusableOpacity;\n","D:\\Projects\\react-native-tv-demo\\src\\components\\focusable\\FocusableButton.js",["151"],"import React, {useState, forwardRef} from 'react';\nimport {Button} from 'react-native';\n\nconst FocusableButton = forwardRef((props, ref) => {\n  const [focused, setFocused] = useState(false);\n  const [pressed, setPressed] = useState(false);\n\n  let color = props.color;\n  if (focused && props.colorFocused) {\n    color = props.colorFocused;\n  } else if (pressed && props.colorPressed) {\n    color = props.colorPressed;\n  }\n\n  return (\n    <Button\n      {...props}\n      ref={ref}\n      onPress={(event) => {\n        if (event.eventKeyAction !== undefined) {\n          setPressed(parseInt(event.eventKeyAction) === 0);\n          if (props.onPress) {\n            props.onPress(event);\n          }\n        }\n      }}\n      onFocus={(event) => {\n        console.log('focus: ' + props.nativeID);\n        setFocused(true);\n        if (props.onFocus) {\n          props.onFocus(event);\n        }\n      }}\n      onBlur={(event) => {\n        setFocused(false);\n        if (props.onBlur) {\n          props.onBlur(event);\n        }\n      }}\n      color={color}\n    />\n  );\n});\n\nexport default FocusableButton;\n","D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\ComponentsDemo.js",[],"D:\\Projects\\react-native-tv-demo\\src\\components\\focusable\\FocusableSwitch.js",[],"D:\\Projects\\react-native-tv-demo\\src\\components\\demos\\VideoProgressBar.js",[],"D:\\Projects\\react-native-tv-demo\\src\\hooks\\useStateRef.js",["152"],"import React, {useState, useRef} from 'react';\n\n/**\n * Custom hook to handle state with ref.\n * This is convenient to use with DOM callbacks (setTimeout, setInterval)\n */\nconst useStateRef = (initialState) => {\n  const [_state, _setState] = useState(initialState);\n  const stateRef = useRef(_state);\n\n  const setState = (newState) => {\n    stateRef.current = newState;\n    _setState(newState);\n  };\n\n  const getState = () => {\n    return stateRef.current;\n  };\n\n  return [stateRef, getState, setState];\n};\n\nexport default useStateRef;\n","D:\\Projects\\react-native-tv-demo\\src\\hooks\\useNodeHandle.js",["153"],"import React, {useState, useEffect} from 'react';\nimport {findNodeHandle} from 'react-native';\n\n/**\n * Custom hook to get native node handle from ref.\n * This is used in order to have nextFocus* working with react-native-web\n *\n * @param ref\n * @returns {unknown}\n */\nconst useNodeHandle = (ref) => {\n  const [nodeHandle, setNodeHandle] = useState(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      setNodeHandle(findNodeHandle(ref.current));\n    }\n  }, [ref.current]);\n\n  return nodeHandle;\n};\n\nexport default useNodeHandle;\n","D:\\Projects\\react-native-tv-demo\\src\\hooks\\useNodeID.js",["154"],"D:\\Projects\\react-native-tv-demo\\src\\hooks\\findNodeID.js",["155"],"import React from 'react';\nimport {findNodeHandle, Platform} from 'react-native';\n\n/**\n * findNodeHandle() returns a DOM element with react-native-web.\n * This is not convenient to use in some cases as native platforms return a number.\n *\n * We can get usable handle for Web platform using the nativeID prop if set.\n * Using this custom hook we can check the node ID instead of node Handle.\n *\n * @param component\n * @returns {unknown}\n */\nconst findNodeID = (component) => {\n  const handle = findNodeHandle(component);\n  if (Platform.OS === 'web') {\n    return handle.getAttribute('id');\n  } else {\n    return handle;\n  }\n};\n\nexport default findNodeID;\n",["156","157","158","159","160","161","162","163"],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","severity":1,"message":"181","line":10,"column":22,"nodeType":"182","messageId":"183","endLine":10,"endColumn":35},{"ruleId":"180","severity":1,"message":"181","line":17,"column":22,"nodeType":"182","messageId":"183","endLine":17,"endColumn":35},{"ruleId":"180","severity":1,"message":"184","line":2,"column":21,"nodeType":"182","messageId":"183","endLine":2,"endColumn":31},{"ruleId":"180","severity":1,"message":"185","line":1,"column":26,"nodeType":"182","messageId":"183","endLine":1,"endColumn":32},{"ruleId":"186","severity":1,"message":"187","line":14,"column":22,"nodeType":"188","messageId":"189","endLine":14,"endColumn":52},{"ruleId":"190","severity":1,"message":"191","line":54,"column":48,"nodeType":"192","endLine":54,"endColumn":63},{"ruleId":"180","severity":1,"message":"193","line":38,"column":10,"nodeType":"182","messageId":"183","endLine":38,"endColumn":20},{"ruleId":"180","severity":1,"message":"194","line":41,"column":18,"nodeType":"182","messageId":"183","endLine":41,"endColumn":27},{"ruleId":"180","severity":1,"message":"195","line":45,"column":10,"nodeType":"182","messageId":"183","endLine":45,"endColumn":17},{"ruleId":"180","severity":1,"message":"196","line":46,"column":10,"nodeType":"182","messageId":"183","endLine":46,"endColumn":19},{"ruleId":"180","severity":1,"message":"197","line":47,"column":10,"nodeType":"182","messageId":"183","endLine":47,"endColumn":19},{"ruleId":"180","severity":1,"message":"198","line":50,"column":10,"nodeType":"182","messageId":"183","endLine":50,"endColumn":19},{"ruleId":"180","severity":1,"message":"199","line":51,"column":10,"nodeType":"182","messageId":"183","endLine":51,"endColumn":20},{"ruleId":"180","severity":1,"message":"200","line":1,"column":16,"nodeType":"182","messageId":"183","endLine":1,"endColumn":25},{"ruleId":"180","severity":1,"message":"201","line":41,"column":10,"nodeType":"182","messageId":"183","endLine":41,"endColumn":16},{"ruleId":"202","severity":1,"message":"203","line":66,"column":11,"nodeType":"182","messageId":"204","endLine":66,"endColumn":17},{"ruleId":"190","severity":1,"message":"205","line":407,"column":14,"nodeType":"192","endLine":407,"endColumn":45},{"ruleId":"186","severity":1,"message":"187","line":14,"column":22,"nodeType":"188","messageId":"189","endLine":14,"endColumn":52},{"ruleId":"186","severity":1,"message":"187","line":21,"column":22,"nodeType":"188","messageId":"189","endLine":21,"endColumn":52},{"ruleId":"180","severity":1,"message":"206","line":1,"column":8,"nodeType":"182","messageId":"183","endLine":1,"endColumn":13},{"ruleId":"180","severity":1,"message":"206","line":1,"column":8,"nodeType":"182","messageId":"183","endLine":1,"endColumn":13},{"ruleId":"180","severity":1,"message":"206","line":1,"column":8,"nodeType":"182","messageId":"183","endLine":1,"endColumn":13},{"ruleId":"180","severity":1,"message":"206","line":1,"column":8,"nodeType":"182","messageId":"183","endLine":1,"endColumn":13},{"ruleId":"164","replacedBy":"207"},{"ruleId":"166","replacedBy":"208"},{"ruleId":"168","replacedBy":"209"},{"ruleId":"170","replacedBy":"210"},{"ruleId":"172","replacedBy":"211"},{"ruleId":"174","replacedBy":"212"},{"ruleId":"176","replacedBy":"213"},{"ruleId":"178","replacedBy":"214"},"no-negated-in-lhs",["215"],"no-catch-shadow",["202"],"handle-callback-err",[],"no-mixed-requires",[],"no-new-require",[],"no-path-concat",[],"no-restricted-modules",[],"no-spaced-func",["216"],"no-unused-vars","'setAppContext' is assigned a value but never used.","Identifier","unusedVar","'StyleSheet' is defined but never used.","'useRef' is defined but never used.","radix","Missing radix parameter.","CallExpression","missingRadix","react-native/no-inline-styles","Inline style: { marginTop: 40 }","ObjectExpression","'appContext' is assigned a value but never used.","'setSource' is assigned a value but never used.","'isReady' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'isPlaying' is assigned a value but never used.","'pausedRef' is assigned a value but never used.","'overlayRef' is assigned a value but never used.","'useEffect' is defined but never used.","'format' is assigned a value but never used.","no-shadow","'format' is already declared in the upper scope.","noShadow","Inline style: { width: '100%', height: '100%' }","'React' is defined but never used.",["215"],["202"],[],[],[],[],[],["216"],"no-unsafe-negation","func-call-spacing"]